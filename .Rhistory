shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
names(routes)
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
?scale_color_manual
?scale_color_manual
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
input$plotColorDropdown
name(input$plotColorDropdown)
choices = c("Sigmet Overlap" = "thisWeather",
"Sigmet in Region" = "regionWeather",
"Storm Events Overlap (US Only)" = "stormEvent",
#"Any Delay (US Only)" = "anyDelay",
"Weather Delay (US Only)" = "weatherDelay",
"NAS Delay (US Only)" = "nasDelay")
names(choices)[choices == input$plotColorDropdown]
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
?ggsave
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
leaflet() %>%
addProviderTiles("CartoDB.Positron", group = "Carto") %>%
addPolylines(data = st_zm(selFlight),
color = ~factpal(as.character(get(isolate({input$mapColorDropdown})))),
weight = 1,
popup = states_popup,
#label = ~id,
layerId = ~id,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
highlightOptions = highlightOptions(
color = isolate({input$mapColorHighlight}), opacity = 1, weight = 2, fillOpacity = 1,
bringToFront = TRUE, sendToBack = TRUE)
)
leaflet() %>%
addProviderTiles("CartoDB.Positron", group = "Carto") %>%
addPolylines(data = st_zm(selFlight),
color = ~factpal(as.character(get(isolate({input$mapColorDropdown})))),
weight = 1,
popup = states_popup,
#label = ~id,
layerId = ~id,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
highlightOptions = highlightOptions(
color = isolate({input$mapColorHighlight}), opacity = 1, weight = 2, fillOpacity = 1,
bringToFront = TRUE, sendToBack = TRUE)
) %>%
addLegend("bottomright", pal = factpal,
values = ~st_zm(selFlight)[,input$mapColorDropdown],
title = input$mapColorDropdown,
opacity = 1
)
leaflet() %>%
addProviderTiles("CartoDB.Positron", group = "Carto") %>%
addPolylines(data = st_zm(selFlight),
color = ~factpal(as.character(get(isolate({input$mapColorDropdown})))),
weight = 1,
popup = states_popup,
#label = ~id,
layerId = ~id,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
highlightOptions = highlightOptions(
color = isolate({input$mapColorHighlight}), opacity = 1, weight = 2, fillOpacity = 1,
bringToFront = TRUE, sendToBack = TRUE)
) %>%
addLegend("bottomright"
)
leaflet() %>%
addProviderTiles("CartoDB.Positron", group = "Carto") %>%
addPolylines(data = st_zm(selFlight),
color = ~factpal(as.character(get(isolate({input$mapColorDropdown})))),
weight = 1,
popup = states_popup,
#label = ~id,
layerId = ~id,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
highlightOptions = highlightOptions(
color = isolate({input$mapColorHighlight}), opacity = 1, weight = 2, fillOpacity = 1,
bringToFront = TRUE, sendToBack = TRUE)
) %>%
addLegend("bottomright", colors = factpal
)
leaflet() %>%
addProviderTiles("CartoDB.Positron", group = "Carto") %>%
addPolylines(data = st_zm(selFlight),
color = ~factpal(as.character(get(isolate({input$mapColorDropdown})))),
weight = 1,
popup = states_popup,
#label = ~id,
layerId = ~id,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
highlightOptions = highlightOptions(
color = isolate({input$mapColorHighlight}), opacity = 1, weight = 2, fillOpacity = 1,
bringToFront = TRUE, sendToBack = TRUE)
) %>%
addLegend("bottomright", colors = factpal, labels = c("TRUE", "FALSE", "NA"
)
)
leaflet() %>%
addProviderTiles("CartoDB.Positron", group = "Carto") %>%
addPolylines(data = st_zm(selFlight),
color = ~factpal(as.character(get(isolate({input$mapColorDropdown})))),
weight = 1,
popup = states_popup,
#label = ~id,
layerId = ~id,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
highlightOptions = highlightOptions(
color = isolate({input$mapColorHighlight}), opacity = 1, weight = 2, fillOpacity = 1,
bringToFront = TRUE, sendToBack = TRUE)
) %>%
addLegend("bottomright", colors = c("red","green","gray"), labels = c("TRUE", "FALSE", "NA"
)
)
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
View(readBalloonLocations)
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
?addPolylines
?plotlyProxyInvoke
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
totals <- selFlights %>%
group_by(route) %>%
summarize(total = sum(cost),
average = sum(cost) / length(route),
weather = round(sum(get(input$costColorRadio)) / length(route) * 100 ))
totals
selFlights[,get(input$costColorRadio)]
names(selFlights)
selFlights$stormEvent
selFlights[,"stormEvent"]
na.rm(selFlights[,"stormEvent"])
na.omit(selFlights[,"stormEvent"])
totals <- selFlights %>%
group_by(route) %>%
summarize(total = sum(cost),
average = sum(cost) / length(route),
weather = round(sum(na.omit(get(input$costColorRadio))) / length(route) * 100 ))
totals
sum(na.omit(get(input$costColorRadio)))
sum(na.omit(get(selFlights[,input$costColorRadio])))
selFlights[,input$costColorRadio]
sum(na.omit(selFlights[,input$costColorRadio]))
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
totals <- selFlights %>%
group_by(route) %>%
summarize(total = sum(cost),
average = sum(cost) / length(route),
weather = round(sum(na.omit(get(input$costColorRadio))) / length(route) * 100 ),
weatherCost = sum(cost[which(get(input$costColorRadio))] / sum(cost)) )
totals
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
totals <- selFlights %>%
group_by(route) %>%
summarize(total = sum(cost),
average = sum(cost) / length(route),
weather = round(sum(na.omit(get(input$costColorRadio))) / length(route) * 100 ),
weatherCost = round(sum(cost[which(get(input$costColorRadio))] / sum(cost)) * 100) )
selFlights[,input$costColorRadio]
!is.null(input$costColorRadio) && (input$costColorRadio  == "weatherDelay" | input$costColorRadio  == "nasDelay")
totals <- selFlights %>%
group_by(route) %>%
summarize(total = sum(cost),
average = sum(cost) / length(route),
weather = round(sum(na.omit(get(input$costColorRadio))) / length(route) * 100 ),
weatherCost = round(sum(cost[which(as.logical(get(input$costColorRadio)))] / sum(cost)) * 100) )
totals
as.logical(get(input$costColorRadio))
as.logical(selFlights[,get(input$costColorRadio)])
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
totals <- selFlights %>%
group_by(route) %>%
summarize(total = sum(cost),
average = sum(cost) / length(route),
weather = round(sum(na.omit(get(input$costColorRadio))) / length(route) * 100 ),
weatherCost = round(sum(cost[which(as.logical(get(input$costColorRadio)))] / sum(cost)) * 100) )
totals
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
routeChangeTrigger == FALSE
routeChangeTrigger == FALSE
routeChangeTrigger() == FALSE
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
routeChangeTrigger() == FALSE
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
routeChangeTrigger() == FALSE
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
routeChangeTrigger() == FALSE
routeChangeTrigger()
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection())
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
routeChangeTrigger() == FALSE
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
routeChangeTrigger == FALSE
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
routeChangeTrigger() == FALSE
routeChangeTrigger()
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
routeChangeTrigger()
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
routeChangeTrigger() == FALSE
routeChangeTrigger()
!routeChangeTrigger()
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
useRouteDropdown()
useRouteDropdown()
useRouteDropdown()
useRouteDropdown()
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
useRouteDropdown()
mapRouteDropdownSelection()
useRouteDropdown()
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
useRouteDropdown()
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
useRouteDropdown()
!is.null(mapRouteDropdownSelection()) &&
!is.na(mapRouteDropdownSelection()) &&
useRouteDropdown()
appDataDir
appDataDir <- "/Users/kevinschweiker/Documents/Freelancing/Airbus/routeComparisonApp/"
geomatrix_distcovars <- get(load(file.path(appDataDir, "data/geo.RDS")))
flightgeo_distcovars <- get(load(file.path(appDataDir, "data/df.RDS")))
createRouteFolders(flightgeo_distcovars, geomatrix_distcovars,
file.path(appDataDir, "data/appRoutes"))
flightgeo_distcovars <- createFlightgeo(geomatrix_distcovars, flightgeo_distcovars, drop = "velocity")
rm(geomatrix_distcovars)
routes <- createRouteLevelData(flightgeo_distcovars)
View(routes)
oldroutes <- get(load(file.path(appDataDir, "data/routes.RDS")))
oldroutes <- get(load(file.path(appDataDir, "R/data/routes.RDS")))
View(routes)
View(oldroutes)
save(routes, file = file.path(appDataDir, "R/data/routes.RDS"))
install.packages("remotes")
remotes::install_github("rstudio/webshot2")
remotes::install_github("rstudio/webshot2")
remove.packages(chromote)
remove.packages(later)
remove.packages(promises)
remove.packages(askpass)
remove.packages("askpass")
remove.packages("promises")
remove.packages("later")
remove.packages("chromote")
remove.packages("AsioHeaders")
remove.packages("antiword")
remove.packages("assertthat")
remove.packages("bayesplot")
remove.packages("BB")
remove.packages("betareg")
remove.packages("BH")
remove.packages("bindr")
remove.packages("biogeo")
remove.packages("clipr")
remove.packages("dendextend")
remove.packages("diptest")
remove.packages("zoo")
remove.packages("yaml")
remove.packages("ini")
remove.packages("crosstalk")
remove.packages("cvAUC")
remove.packages("fensi")
remove.packages("fansi")
remove.packages("mime")
remove.packages("lava")
remove.packages("leaps")
remove.packages("gower")
remove.packages("memoise")
remove.packages("munsell")
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
install.packages(
"later"
)
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
install.packages(
"promises"
)
shiny::runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
install.packages("munsell")
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
install.packages("assertthat")
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
install.packages("crosstalk")
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
remotes::install_github("rstudio/webshot2")
install.packages("websocket")
install.packages("websocket")
remotes::install_github("rstudio/webshot2")
install.packages("chromote")
runApp('Documents/Freelancing/Airbus/routeComparisonApp/R')
install.packages("yaml")
# 3. Install Packages
packages <- c("devtools", "shiny", "shinydashboard", "data.table", "DT",
"ggplot2", "plotly", "colourpicker", "leaflet", "lubridate",
"sp", "rgeos", "rgdal", "sf", "stringr", "dplyr", "R.utils",
"svglite", "lwgeom", "shinythemes", "shinycssloaders", "Imap")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
# 3.  change path to MonaRk (including "MonaRk as last directory")
# IN RMARKDOWN
knitr::opts_knit$set(root.dir = "/path/to/MonaRk/")
setwd("/Users/kevinschweiker/Documents/Freelancing/Airbus/MonaRk")
# 4. Load MonaRk
devtools::load_all()
MonaRk::launchApp()
remove.packages(devtools)
remove.packages("devtools")
remove.packages("shiny")
remove.packages("shinydashboard")
remove.packages("data.table")
remove.packages("DT")
